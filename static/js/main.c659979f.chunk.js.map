{"version":3,"sources":["context/main/reducer.js","context/main/index.js","pages/home/index.js","pages/upload/index.js","pages/magic/index.js","pages/about/index.js","components/title/index.js","components/navigation/index.js","app.js","serviceWorker.js","index.js"],"names":["initialState","count","reducer","state","action","type","MainContext","React","createContext","MainContextProvider","children","useReducer","value","dispatch","Provider","Consumer","Home","useContext","to","onClick","Upload","Magic","About","locationTitleMapping","withRouter","location","pathname","Fragment","history","createBrowserHistory","App","title","exact","path","component","AppContainer","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iZAAaA,EAAe,CAC1BC,MAAO,GAGIC,EAAU,SAACC,EAAOC,GAC7B,OAAQA,EAAOC,MACb,IAAK,iBACH,OAAO,eACFF,EADL,CAEEF,MAAOE,EAAMF,MAAQ,IAEzB,QACE,OAAOE,ICTPG,EAAcC,IAAMC,gBAE1B,SAASC,EAAT,GAA4C,IAAbC,EAAY,EAAZA,SAAY,EACfC,qBAAWT,EAASF,GADL,mBAEnCY,EAAQ,CAAET,MAFyB,KAElBU,SAFkB,MAIzC,OACE,kBAACP,EAAYQ,SAAb,CAAsBF,MAAOA,GAC1BF,GAKqBJ,EAAYS,SCEzBC,MAbf,WAAiB,IAAD,EACcC,qBAAWX,GAA/BH,EADM,EACNA,MAAOU,EADD,EACCA,SAEf,OACE,6BACE,kBAAC,IAAD,CAAMK,GAAG,WAAT,eAGA,4BAAQC,QAAS,kBAAMN,EAAS,CAAER,KAAM,qBAAsBF,EAAMF,S,MCF3DmB,MARf,WACE,OACE,6C,MCMWC,MARf,WACE,OACE,4C,MCMWC,MARf,WACE,OACE,4CCDEC,G,MAAuB,CAC3B,IAAK,cACL,UAAW,SACX,SAAU,QACV,SAAU,aAYGC,eATD,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACf,MAA0B,MAAtBA,EAASC,SAET,6BAAMH,EAAqBE,EAASC,WAGjC,MCAMF,G,MAAAA,aAbI,SAAC,GAClB,MAA0B,MADS,EAAfC,SACPC,SAET,kBAAC,IAAMC,SAAP,KACI,kBAAC,IAAD,CAAMT,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,aAID,OCHHU,EAAUC,cAUhB,SAASC,IACP,OACE,kBAAC,IAAD,CAAQF,QAASA,GACf,kBAAC,IAAMD,SAAP,KACE,kBAAC,EAAD,CAAOI,MAAO,oBACd,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlB,IACjC,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,UAAUC,UAAWd,IACvC,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,SAASC,UAAWb,IACtC,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,SAASC,UAAWZ,MAM/Ba,MAvBf,WACE,OACE,kBAAC1B,EAAD,KACE,kBAACqB,EAAD,QCJcM,QACW,cAA7BC,OAAOZ,SAASa,UAEe,UAA7BD,OAAOZ,SAASa,UAEhBD,OAAOZ,SAASa,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,SD6HpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c659979f.chunk.js","sourcesContent":["export const initialState = {\n  count: 0,\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case 'incrementCount':\n      return {\n        ...state,\n        count: state.count + 1,\n      };\n    default:\n      return state;\n  }\n};\n","import React, { useReducer } from 'react';\nimport { initialState, reducer } from './reducer';\n\nconst MainContext = React.createContext();\n\nfunction MainContextProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const value = { state, dispatch };\n\n  return (\n    <MainContext.Provider value={value}>\n      {children}\n    </MainContext.Provider>\n  );\n}\n\nconst MainContextConsumer = MainContext.Consumer;\n\nexport { MainContext, MainContextProvider, MainContextConsumer };","import './index.css';\nimport React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { MainContext } from '../../context/main';\n\nfunction Home() {\n  const { state, dispatch } = useContext(MainContext);\n\n  return (\n    <div>\n      <Link to=\"/upload\">\n        Get Started\n      </Link>\n      <button onClick={() => dispatch({ type: 'incrementCount' })}>{state.count}</button>\n    </div>\n  );\n}\n\nexport default Home;\n","import './index.css';\nimport React from 'react';\n\nfunction Upload() {\n  return (\n    <div>\n      Upload Page\n    </div>\n  );\n}\n\nexport default Upload;\n","import './index.css';\nimport React from 'react';\n\nfunction Magic() {\n  return (\n    <div>\n      Magic Page\n    </div>\n  );\n}\n\nexport default Magic;\n","import './index.css';\nimport React from 'react';\n\nfunction About() {\n  return (\n    <div>\n      About Page\n    </div>\n  );\n}\n\nexport default About;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport './index.css';\n\nconst locationTitleMapping = {\n  '/': 'Get Started',\n  '/upload': 'Upload',\n  '/magic': 'Magic',\n  '/about': 'About Us'\n};\n\nconst Title = ({ location }) => {\n  if (location.pathname !== '/') {\n    return (\n      <div>{locationTitleMapping[location.pathname]}</div>\n    )\n  }\n  return '';\n}\n\nexport default withRouter(Title);","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport './index.css';\n\nconst Navigation = ({ location }) => {\n  if (location.pathname !== '/') {\n    return (\n      <React.Fragment>\n          <Link to=\"/upload\">Upload</Link>\n          <Link to=\"/magic\">Magic</Link>\n          <Link to=\"/about\">About Us</Link>\n      </React.Fragment>\n    )\n  }\n  return '';\n}\n\nexport default withRouter(Navigation);","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { createBrowserHistory } from 'history';\nimport Home from './pages/home';\nimport Upload from './pages/upload';\nimport Magic from './pages/magic';\nimport About from './pages/about';\nimport { MainContextProvider } from \"./context/main\";\nimport Title from './components/title';\nimport Navigation from './components/navigation';\n\nconst history = createBrowserHistory();\n\nfunction AppContainer() {\n  return (\n    <MainContextProvider>\n      <App/>\n    </MainContextProvider>\n  );\n}\n\nfunction App() {\n  return (\n    <Router history={history}>\n      <React.Fragment>\n        <Title title={'Weather Stellar'} />\n        <Navigation/>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/upload\" component={Upload} />\n        <Route exact path=\"/magic\" component={Magic} />\n        <Route exact path=\"/about\" component={About} />\n      </React.Fragment>\n    </Router>\n  )\n}\n\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppContainer from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}