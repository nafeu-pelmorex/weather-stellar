{"version":3,"sources":["context/main/reducer.js","context/main/index.js","pages/home/index.js","pages/upload/index.js","pages/magic/index.js","pages/about/index.js","components/navigation/index.js","app.js","serviceWorker.js","index.js"],"names":["initialState","count","reducer","state","action","type","MainContext","React","createContext","MainContextProvider","children","useReducer","value","dispatch","Provider","Consumer","useStyles","makeStyles","theme","root","padding","paper","Home","useContext","Grid","item","xs","Typography","gutterBottom","to","Upload","Magic","About","TAB_VALUES","withRouter","location","history","useHistory","selectedTab","indexOf","pathname","Tabs","onChange","event","newValue","push","variant","indicatorColor","textColor","Tab","icon","label","createBrowserHistory","paddingTop","App","classes","basename","Container","className","maxWidth","Paper","exact","path","component","AppContainer","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f046c62e.chunk.js","sourcesContent":["export const initialState = {\n  count: 0,\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case 'incrementCount':\n      return {\n        ...state,\n        count: state.count + 1,\n      };\n    default:\n      return state;\n  }\n};\n","import React, { useReducer } from 'react';\nimport { initialState, reducer } from './reducer';\n\nconst MainContext = React.createContext();\n\nfunction MainContextProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const value = { state, dispatch };\n\n  return (\n    <MainContext.Provider value={value}>\n      {children}\n    </MainContext.Provider>\n  );\n}\n\nconst MainContextConsumer = MainContext.Consumer;\n\nexport { MainContext, MainContextProvider, MainContextConsumer };","import React, { useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport { MainContext } from '../../context/main';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: '1em'\n  },\n  paper: {}\n}));\n\nfunction Home() {\n  const { state, dispatch } = useContext(MainContext);\n  const classes = useStyles();\n\n  return (\n    <Grid item xs={12}>\n      <Typography gutterBottom>\n        <Link to=\"/upload\">Get Started</Link>\n      </Typography>\n    </Grid>\n  );\n}\n\nexport default Home;","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nfunction Upload() {\n  return (\n    <Typography gutterBottom>\n      Upload Section\n    </Typography>\n  );\n}\n\nexport default Upload;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nfunction Magic() {\n  return (\n    <Typography gutterBottom>\n      Magic Section\n    </Typography>\n  );\n}\n\nexport default Magic;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nfunction About() {\n  return (\n    <Typography gutterBottom>\n      About Us Section\n    </Typography>\n  );\n}\n\nexport default About;\n","import React from 'react';\nimport { withRouter, useHistory } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport TimelineIcon from '@material-ui/icons/Timeline';\nimport InfoIcon from '@material-ui/icons/Info';\n\nconst TAB_VALUES = [\n  '/upload',\n  '/magic',\n  '/about'\n];\n\nconst Navigation = ({ location }) => {\n  const history = useHistory();\n  const selectedTab = TAB_VALUES.indexOf(location.pathname);\n\n  const handleChange = (event, newValue) => {\n    history.push(TAB_VALUES[newValue]);\n  };\n\n  if (location.pathname !== '/') {\n    return (\n      <Tabs\n        value={selectedTab}\n        onChange={handleChange}\n        variant=\"fullWidth\"\n        indicatorColor=\"primary\"\n        textColor=\"primary\"\n      >\n        <Tab icon={<CloudUploadIcon />} label=\"Upload\" />\n        <Tab icon={<TimelineIcon />} label=\"Magic\" />\n        <Tab icon={<InfoIcon />} label=\"Why Us?\" />\n      </Tabs>\n    );\n  }\n  return '';\n}\n\nexport default withRouter(Navigation);\n","import 'typeface-roboto';\nimport React from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport { createBrowserHistory } from 'history';\nimport Home from './pages/home';\nimport Upload from './pages/upload';\nimport Magic from './pages/magic';\nimport About from './pages/about';\nimport { MainContextProvider } from \"./context/main\";\nimport Navigation from './components/navigation';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst history = createBrowserHistory();\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    paddingTop: '2em'\n  },\n  paper: {\n    padding: '1em'\n  }\n}));\n\nfunction AppContainer() {\n  return (\n    <MainContextProvider>\n      <App/>\n    </MainContextProvider>\n  );\n}\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <HashRouter basename=\"/\" history={history}>\n      <Container className={classes.root} maxWidth=\"md\">\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            <Navigation/>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/upload\" component={Upload} />\n            <Route exact path=\"/magic\" component={Magic} />\n            <Route exact path=\"/about\" component={About} />\n          </Paper>\n        </Grid>\n      </Container>\n    </HashRouter>\n  );\n}\n\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppContainer from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}